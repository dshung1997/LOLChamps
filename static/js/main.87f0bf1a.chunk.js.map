{"version":3,"sources":["Components/Champion/Champion.js","Components/ListChampions/ListChampions.js","Components/ListChampions/ListChampionsContainer.js","Components/SearchBox/SearchBox.js","Components/SearchBox/SearchBoxContainer.js","Redux/Actions/index.js","Redux/Types/types.js","Redux/Reducers/champs.js","Redux/Reducers/index.js","store.js","Redux/Middleware/middleware.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Champion","react_default","a","createElement","className","concat","this","props","visible","src","image_url","alt","name","Component","ListChampions","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","champsComponent","map","champ","index","Components_Champion_Champion","key","toString","connect","champs","ListChampionsComponent","SearchBox","text","event","target","value","setState","onChange","type","placeholder","aria-label","handleChange","bind","dispatch","filter","SearchBoxComponent","initialState","error","error_message","rootReducer","combineReducers","arguments","length","undefined","action","newState","JSON","parse","stringify","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","c","includes","err","return","middlewares","store","console","log","fetch","then","res","json","response","parsedData","rawData","hasOwnProperty","push","parseData","catch","createStore","applyMiddleware","apply","subscribe","getState","App","es","SearchBoxContainer_SearchBox","ListChampionsContainer_ListChampions","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87f0bf1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Champion.css';\n\nclass Champion extends Component {\n\n    // constructor(props)\n    // {\n    //     super(props);\n    // }\n\n    render() {\n        return (\n            <li className={`li-wrapper ${this.props.visible ? '' : 'hidden'}`}>\n                <div className='champ-wrapper'>\n                    <img className={'champ-image'} src={this.props.image_url} alt={this.props.name}/>\n                    <div>\n                        <span className='champ-name'>{this.props.name}</span>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n}\n\nChampion.propTypes = {\n    name: PropTypes.string.isRequired,\n    image_url: PropTypes.string.isRequired,\n    visible: PropTypes.bool.isRequired\n}\n\nexport default Champion;\n","import React, { Component } from 'react';\nimport Champion from '../Champion';\nimport './ListChampions.css';\n\nclass ListChampions extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {data: []};\n    }\n\n    // componentDidMount() {\n        \n    // }\n\n    render() {\n\n        // console.log('State');\n        // console.log(this.props.data);\n\n        let data = this.props.data;\n        let champsComponent = data.map((champ, index) => <Champion key={index.toString()} name={champ.name} image_url={champ.image_url} visible={champ.visible}/>);\n\n        return (\n            <div>\n                <ul className='list-champs-wrapper'>\n                    {champsComponent}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default ListChampions;\n","import {default as ListChampionsComponent} from './ListChampions.js';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n    return {\n        data: state.champs.data,\n    }\n};\n\nconst mapDispatchToProps = null;\n// dispatch => {\n//     return {\n//         onChange: (text) => dispatch(filter(text)),\n//     }\n// };\n\nexport const ListChampions = connect(\n    mapStateToProps, \n    mapDispatchToProps\n)(ListChampionsComponent);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBox.css';\n\nclass SearchBox extends Component {\n\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {text: ''};\n    }\n\n    handleChange(event) {\n        let text = event.target.value;\n        // console.log(\"input: \" + text);\n        this.setState({text});\n        this.props.onChange(text);\n    }\n\n    render() {\n        return (\n            <div className=\"searchbox-container\">\n                <input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" name=\"name\" value={this.state.text} onChange={this.handleChange.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nSearchBox.propTypes = {\n    onChange: PropTypes.func.isRequired\n}\n\nexport default SearchBox;\n","import {default as SearchBoxComponent} from './SearchBox.js';\nimport {filter} from '../../Redux/Actions';\nimport { connect } from 'react-redux';\n\n// const dispatchFilter = (dispatch, text) => {\n//     dispatch(filter(text));\n// }\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onChange: (text) => dispatch(filter(text)),\n    }\n};\n\nexport const SearchBox = connect(\n    mapStateToProps, \n    mapDispatchToProps\n)(SearchBoxComponent);\n\n","import * as Type from '../Types';\n\n// export const filter = text => ({\n//     type: Type.FILTER_CHAMPS,\n//     text\n// });\n\n// export const setData = data => ({\n//     type: Type.SET_CHAMPS,\n//     data\n// });\n\nconst parseData = (rawData) => {\n    let data = [];\n\n    for (const key in rawData) {\n        if (rawData.hasOwnProperty(key)) {\n            data.push(\n                {\n                    name: key,\n                    image_url: 'https://ddragon.leagueoflegends.com/cdn/9.6.1/img/champion/'+key+'.png'\n                }\n            );\n        }\n    }\n\n    return data;\n};\n\nexport const getChamps = (dispatch) => \n{\n    fetch('https://ddragon.leagueoflegends.com/cdn/9.6.1/data/en_US/champion.json')\n        .then(res => res.json())\n        .then(response => {\n            let parsedData = parseData(response.data);\n            dispatch({\n                type: Type.SET_CHAMPS,\n                data: parsedData\n            });\n        })\n        .catch(error => console.error('Error:', error));\n};\n\nexport const filter = (text) => {\n    return {\n        type: Type.FILTER_CHAMPS,\n        text\n    };\n}","export const FILTER_CHAMPS = 'FILTER_CHAMPS';\nexport const GET_CHAMPS = 'GET_CHAMPS';\nexport const GET_CHAMPS_ERROR = 'GET_CHAMPS_ERROR';\nexport const SET_CHAMPS = 'SET_CHAMPS';","import * as Type from '../Types';\n\nconst initialState = {\n    data: [],\n    text: '',\n    error: 0,\n    error_message: '',\n};\n\nexport const champs = (state = initialState, action) =>\n{\n    if(action.type === Type.GET_CHAMPS_ERROR)\n    {\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.error = 1;\n        newState.error_message = action.data;\n\n        return newState;\n    }\n\n    else if(action.type === Type.SET_CHAMPS)\n    {\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.data = action.data;\n       \n        return newState;\n    }\n\n    else if(action.type === Type.FILTER_CHAMPS)\n    {\n        let newState = JSON.parse(JSON.stringify(state));\n\n        newState.text = action.text;\n        \n        for(let c of newState.data)\n        {\n            c.visible = c.name.includes(newState.text);\n            // console.log(\"c: \" + c);\n        }\n        // newState.data[0].visible = true;\n\n        return newState;\n    }\n\n    return state;\n}","import { combineReducers } from 'redux';\nimport {champs} from './champs.js';\n\nexport const rootReducer = combineReducers({\n    // filter,\n    champs\n});","import {createStore, applyMiddleware } from 'redux';\nimport {rootReducer} from './Redux/Reducers';\nimport {mw} from './Redux/Middleware';\nimport * as Type from './Redux/Types';\n\n// const store = createStore(() => [], {}, applyMiddleware());\n\nconst initialState = {};\n\nconst middlewares = [mw];\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middlewares));\n\nstore.subscribe(() => {\n    console.log(\"state changed\");\n    console.log(store.getState());\n})\n\nstore.dispatch({type: Type.GET_CHAMPS});\n\nexport default store;","import * as Type from '../Types';\n\nconst parseData = (rawData) => {\n    let data = [];\n\n    for (const key in rawData) {\n        if (rawData.hasOwnProperty(key)) {\n            data.push(\n                {\n                    name: key,\n                    image_url: 'https://ddragon.leagueoflegends.com/cdn/9.6.1/img/champion/'+key+'.png',\n                    visible: true,\n                }\n            );\n        }\n    }\n\n    return data;\n};\n\nexport const mw = store => next => action => {\n    console.log(\"mw\");\n    if(action.type === Type.GET_CHAMPS)\n    {\n        fetch('https://ddragon.leagueoflegends.com/cdn/9.6.1/data/en_US/champion.json')\n        .then(res => res.json())\n        .then(response => {\n            let parsedData = parseData(response.data);\n\n            store.dispatch({\n                type: Type.SET_CHAMPS,\n                data: parsedData\n            });\n        })\n        .catch(error => console.log(error));\n            \n        //     store.dispatch(\n        //     {\n        //         type: Type.GET_CHAMPS_ERROR,\n        //         data: error,\n        //     }\n        // ));\n    }\n\n    next(action);\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {ListChampions} from '../ListChampions';\nimport {SearchBox} from '../SearchBox';\nimport {Provider} from 'react-redux';\nimport store from '../../store';\n\nclass App extends Component {\n  render() {\n    return (\n        <Provider store={store}>\n            <div>\n                <img src='https://lolstatic-a.akamaihd.net/frontpage/apps/prod/signup-na-experiment/en_US/2575c5db9a919c320d1668827de0dead00ecab97/assets/assets/lol-logo.png' className='image-lol' alt='logo LOL'/>\n                <SearchBox />\n                <ListChampions/>\n            </div>\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}